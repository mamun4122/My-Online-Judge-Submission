#include <bits/stdc++.h>
#define ll long long int
#define pii pair <int,int>
#define ff first
#define ss second
#define pi acos(-1.0)
#define pb push_back
#define INF (ll)1e17
#define N 200002
#define MOD 1000000007
#define BASE 100003
const double EPS = 1e-9;
#define eq(a,b) (fabs(a-b)<EPS)

//#define FastRead ios_base::sync_with_stdio(0);cin.tie(0)
using namespace std;

template < class T > inline T gcd(T a, T b) {while(b) {a %= b; swap(a, b);} return a;}
template < class T > inline T lcm(T a, T b) {return a/gcd(a, b)*b;}
inline int nxt() {int wow; scanf("%d", &wow); return wow;}
inline ll lxt() {ll wow; scanf("%lld", &wow); return wow;}
inline double dxt() {double wow; scanf("%lf", &wow); return wow;}

/***************** Fighters Launched *******************/

template < class T > inline T bigmod(T p, T e, T M){
    ll ret = 1;
    for(; e > 0; e >>= 1){
        if(e & 1) ret = (ret * p) % M;
        p = (p * p) % M;
    } return (T)ret;
}
/// send ll as arguments

template < class T > inline T modinverse(T a, T M){return bigmod(a, M-2, M);}

/***************** Fighters Launched *******************/

///Check if long long arguments are required
ll fac[N], finv[N];

void generate_factorial_inverse(){
    fac[0] = 1, finv[N-1] = 178857857LL;    ///Generated by using modinverse(fac[N-1], MOD)
    for (ll i=1; i<N; i++) fac[i] = (i * fac[i-1]) % MOD;
    for (ll i=N-2; i>=0; i--) finv[i] = (finv[i+1] * (i+1)) % MOD;
}

ll nCr(int n, int k){
    return (((fac[n] * finv[k]) % MOD) * finv[n-k]) % MOD;
}

int main()
{
    generate_factorial_inverse();
    int t = nxt();
    while (t--){
        int n = nxt(), k = nxt();
        n--;
        ll ans = (nCr(n, k) * 2) % MOD;
        printf("%lld\n", ans);
    }
    return 0;
}